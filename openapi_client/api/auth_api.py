"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: support@clever-cloud.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.message import Message
from openapi_client.model.wannabe_authorization import WannabeAuthorization


class AuthApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __authorize_form(
            self,
            **kwargs
        ):
            """authorize_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.authorize_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                ccid (str): [optional]
                cctk (str): [optional]
                oauth_token (str): [optional]
                ccid2 (str): [optional]
                cli_token (str): [optional]
                from_oauth (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.authorize_form = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/oauth/authorize',
                'operation_id': 'authorize_form',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'ccid',
                    'cctk',
                    'oauth_token',
                    'ccid2',
                    'cli_token',
                    'from_oauth',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ccid':
                        (str,),
                    'cctk':
                        (str,),
                    'oauth_token':
                        (str,),
                    'ccid2':
                        (str,),
                    'cli_token':
                        (str,),
                    'from_oauth':
                        (str,),
                },
                'attribute_map': {
                    'ccid': 'ccid',
                    'cctk': 'cctk',
                    'oauth_token': 'oauth_token',
                    'ccid2': 'ccid',
                    'cli_token': 'cli_token',
                    'from_oauth': 'from_oauth',
                },
                'location_map': {
                    'ccid': 'cookie',
                    'cctk': 'cookie',
                    'oauth_token': 'query',
                    'ccid2': 'query',
                    'cli_token': 'query',
                    'from_oauth': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__authorize_form
        )

        def __authorize_token(
            self,
            **kwargs
        ):
            """authorize_token  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.authorize_token(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                ccid (str): [optional]
                cctk (str): [optional]
                almighty (str): [optional]
                access_organisations (str): [optional]
                manage_organisations (str): [optional]
                manage_organisations_services (str): [optional]
                manage_organisations_applications (str): [optional]
                manage_organisations_members (str): [optional]
                access_organisations_bills (str): [optional]
                access_organisations_credit_count (str): [optional]
                access_organisations_consumption_statistics (str): [optional]
                access_personal_information (str): [optional]
                manage_personal_information (str): [optional]
                manage_ssh_keys (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.authorize_token = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/oauth/authorize',
                'operation_id': 'authorize_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ccid',
                    'cctk',
                    'almighty',
                    'access_organisations',
                    'manage_organisations',
                    'manage_organisations_services',
                    'manage_organisations_applications',
                    'manage_organisations_members',
                    'access_organisations_bills',
                    'access_organisations_credit_count',
                    'access_organisations_consumption_statistics',
                    'access_personal_information',
                    'manage_personal_information',
                    'manage_ssh_keys',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'ccid':
                        (str,),
                    'cctk':
                        (str,),
                    'almighty':
                        (str,),
                    'access_organisations':
                        (str,),
                    'manage_organisations':
                        (str,),
                    'manage_organisations_services':
                        (str,),
                    'manage_organisations_applications':
                        (str,),
                    'manage_organisations_members':
                        (str,),
                    'access_organisations_bills':
                        (str,),
                    'access_organisations_credit_count':
                        (str,),
                    'access_organisations_consumption_statistics':
                        (str,),
                    'access_personal_information':
                        (str,),
                    'manage_personal_information':
                        (str,),
                    'manage_ssh_keys':
                        (str,),
                },
                'attribute_map': {
                    'ccid': 'ccid',
                    'cctk': 'cctk',
                    'almighty': 'almighty',
                    'access_organisations': 'access_organisations',
                    'manage_organisations': 'manage_organisations',
                    'manage_organisations_services': 'manage_organisations_services',
                    'manage_organisations_applications': 'manage_organisations_applications',
                    'manage_organisations_members': 'manage_organisations_members',
                    'access_organisations_bills': 'access_organisations_bills',
                    'access_organisations_credit_count': 'access_organisations_credit_count',
                    'access_organisations_consumption_statistics': 'access_organisations_consumption_statistics',
                    'access_personal_information': 'access_personal_information',
                    'manage_personal_information': 'manage_personal_information',
                    'manage_ssh_keys': 'manage_ssh_keys',
                },
                'location_map': {
                    'ccid': 'cookie',
                    'cctk': 'cookie',
                    'almighty': 'form',
                    'access_organisations': 'form',
                    'manage_organisations': 'form',
                    'manage_organisations_services': 'form',
                    'manage_organisations_applications': 'form',
                    'manage_organisations_members': 'form',
                    'access_organisations_bills': 'form',
                    'access_organisations_credit_count': 'form',
                    'access_organisations_consumption_statistics': 'form',
                    'access_personal_information': 'form',
                    'manage_personal_information': 'form',
                    'manage_ssh_keys': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html',
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__authorize_token
        )

        def __get_available_rights(
            self,
            **kwargs
        ):
            """get_available_rights  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_available_rights(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_available_rights = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/oauth/rights',
                'operation_id': 'get_available_rights',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_available_rights
        )

        def __get_login_data(
            self,
            **kwargs
        ):
            """get_login_data  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_login_data(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                oauth_key (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_login_data = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/oauth/login_data',
                'operation_id': 'get_login_data',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'oauth_key',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'oauth_key':
                        (str,),
                },
                'attribute_map': {
                    'oauth_key': 'oauth_key',
                },
                'location_map': {
                    'oauth_key': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_login_data
        )

        def __post_access_token_request(
            self,
            **kwargs
        ):
            """post_access_token_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_access_token_request(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                oauth_consumer_key (str): [optional]
                oauth_token (str): [optional]
                oauth_signature_method (str): [optional]
                oauth_signature (str): [optional]
                oauth_timestamp (str): [optional]
                oauth_nonce (str): [optional]
                oauth_version (str): [optional]
                oauth_verifier (str): [optional]
                oauth_callback (str): [optional]
                oauth_token_secret (str): [optional]
                oauth_callback_confirmed (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_access_token_request = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/oauth/access_token',
                'operation_id': 'post_access_token_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'oauth_consumer_key',
                    'oauth_token',
                    'oauth_signature_method',
                    'oauth_signature',
                    'oauth_timestamp',
                    'oauth_nonce',
                    'oauth_version',
                    'oauth_verifier',
                    'oauth_callback',
                    'oauth_token_secret',
                    'oauth_callback_confirmed',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'oauth_consumer_key':
                        (str,),
                    'oauth_token':
                        (str,),
                    'oauth_signature_method':
                        (str,),
                    'oauth_signature':
                        (str,),
                    'oauth_timestamp':
                        (str,),
                    'oauth_nonce':
                        (str,),
                    'oauth_version':
                        (str,),
                    'oauth_verifier':
                        (str,),
                    'oauth_callback':
                        (str,),
                    'oauth_token_secret':
                        (str,),
                    'oauth_callback_confirmed':
                        (str,),
                },
                'attribute_map': {
                    'oauth_consumer_key': 'oauth_consumer_key',
                    'oauth_token': 'oauth_token',
                    'oauth_signature_method': 'oauth_signature_method',
                    'oauth_signature': 'oauth_signature',
                    'oauth_timestamp': 'oauth_timestamp',
                    'oauth_nonce': 'oauth_nonce',
                    'oauth_version': 'oauth_version',
                    'oauth_verifier': 'oauth_verifier',
                    'oauth_callback': 'oauth_callback',
                    'oauth_token_secret': 'oauth_token_secret',
                    'oauth_callback_confirmed': 'oauth_callback_confirmed',
                },
                'location_map': {
                    'oauth_consumer_key': 'form',
                    'oauth_token': 'form',
                    'oauth_signature_method': 'form',
                    'oauth_signature': 'form',
                    'oauth_timestamp': 'form',
                    'oauth_nonce': 'form',
                    'oauth_version': 'form',
                    'oauth_verifier': 'form',
                    'oauth_callback': 'form',
                    'oauth_token_secret': 'form',
                    'oauth_callback_confirmed': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-www-form-urlencoded'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__post_access_token_request
        )

        def __post_access_token_request_query(
            self,
            **kwargs
        ):
            """post_access_token_request_query  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_access_token_request_query(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                oauth_consumer_key (str): [optional]
                oauth_token (str): [optional]
                oauth_signature_method (str): [optional]
                oauth_signature (str): [optional]
                oauth_timestamp (str): [optional]
                oauth_nonce (str): [optional]
                oauth_version (str): [optional]
                oauth_verifier (str): [optional]
                oauth_callback (str): [optional]
                oauth_token_secret (str): [optional]
                oauth_callback_confirmed (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_access_token_request_query = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/oauth/access_token_query',
                'operation_id': 'post_access_token_request_query',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'oauth_consumer_key',
                    'oauth_token',
                    'oauth_signature_method',
                    'oauth_signature',
                    'oauth_timestamp',
                    'oauth_nonce',
                    'oauth_version',
                    'oauth_verifier',
                    'oauth_callback',
                    'oauth_token_secret',
                    'oauth_callback_confirmed',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'oauth_consumer_key':
                        (str,),
                    'oauth_token':
                        (str,),
                    'oauth_signature_method':
                        (str,),
                    'oauth_signature':
                        (str,),
                    'oauth_timestamp':
                        (str,),
                    'oauth_nonce':
                        (str,),
                    'oauth_version':
                        (str,),
                    'oauth_verifier':
                        (str,),
                    'oauth_callback':
                        (str,),
                    'oauth_token_secret':
                        (str,),
                    'oauth_callback_confirmed':
                        (str,),
                },
                'attribute_map': {
                    'oauth_consumer_key': 'oauth_consumer_key',
                    'oauth_token': 'oauth_token',
                    'oauth_signature_method': 'oauth_signature_method',
                    'oauth_signature': 'oauth_signature',
                    'oauth_timestamp': 'oauth_timestamp',
                    'oauth_nonce': 'oauth_nonce',
                    'oauth_version': 'oauth_version',
                    'oauth_verifier': 'oauth_verifier',
                    'oauth_callback': 'oauth_callback',
                    'oauth_token_secret': 'oauth_token_secret',
                    'oauth_callback_confirmed': 'oauth_callback_confirmed',
                },
                'location_map': {
                    'oauth_consumer_key': 'query',
                    'oauth_token': 'query',
                    'oauth_signature_method': 'query',
                    'oauth_signature': 'query',
                    'oauth_timestamp': 'query',
                    'oauth_nonce': 'query',
                    'oauth_version': 'query',
                    'oauth_verifier': 'query',
                    'oauth_callback': 'query',
                    'oauth_token_secret': 'query',
                    'oauth_callback_confirmed': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-www-form-urlencoded'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_access_token_request_query
        )

        def __post_authorize(
            self,
            wannabe_authorization,
            **kwargs
        ):
            """post_authorize  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_authorize(wannabe_authorization, async_req=True)
            >>> result = thread.get()

            Args:
                wannabe_authorization (WannabeAuthorization):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['wannabe_authorization'] = \
                wannabe_authorization
            return self.call_with_http_info(**kwargs)

        self.post_authorize = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [],
                'endpoint_path': '/authorize',
                'operation_id': 'post_authorize',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'wannabe_authorization',
                ],
                'required': [
                    'wannabe_authorization',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'wannabe_authorization':
                        (WannabeAuthorization,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'wannabe_authorization': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_authorize
        )

        def __post_req_token_request(
            self,
            **kwargs
        ):
            """post_req_token_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_req_token_request(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                clever_flavor (str): [optional]
                oauth_consumer_key (str): [optional]
                oauth_token (str): [optional]
                oauth_signature_method (str): [optional]
                oauth_signature (str): [optional]
                oauth_timestamp (str): [optional]
                oauth_nonce (str): [optional]
                oauth_version (str): [optional]
                oauth_verifier (str): [optional]
                oauth_callback (str): [optional]
                oauth_token_secret (str): [optional]
                oauth_callback_confirmed (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_req_token_request = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/oauth/request_token',
                'operation_id': 'post_req_token_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'clever_flavor',
                    'oauth_consumer_key',
                    'oauth_token',
                    'oauth_signature_method',
                    'oauth_signature',
                    'oauth_timestamp',
                    'oauth_nonce',
                    'oauth_version',
                    'oauth_verifier',
                    'oauth_callback',
                    'oauth_token_secret',
                    'oauth_callback_confirmed',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'clever_flavor':
                        (str,),
                    'oauth_consumer_key':
                        (str,),
                    'oauth_token':
                        (str,),
                    'oauth_signature_method':
                        (str,),
                    'oauth_signature':
                        (str,),
                    'oauth_timestamp':
                        (str,),
                    'oauth_nonce':
                        (str,),
                    'oauth_version':
                        (str,),
                    'oauth_verifier':
                        (str,),
                    'oauth_callback':
                        (str,),
                    'oauth_token_secret':
                        (str,),
                    'oauth_callback_confirmed':
                        (str,),
                },
                'attribute_map': {
                    'clever_flavor': 'clever_flavor',
                    'oauth_consumer_key': 'oauth_consumer_key',
                    'oauth_token': 'oauth_token',
                    'oauth_signature_method': 'oauth_signature_method',
                    'oauth_signature': 'oauth_signature',
                    'oauth_timestamp': 'oauth_timestamp',
                    'oauth_nonce': 'oauth_nonce',
                    'oauth_version': 'oauth_version',
                    'oauth_verifier': 'oauth_verifier',
                    'oauth_callback': 'oauth_callback',
                    'oauth_token_secret': 'oauth_token_secret',
                    'oauth_callback_confirmed': 'oauth_callback_confirmed',
                },
                'location_map': {
                    'clever_flavor': 'query',
                    'oauth_consumer_key': 'form',
                    'oauth_token': 'form',
                    'oauth_signature_method': 'form',
                    'oauth_signature': 'form',
                    'oauth_timestamp': 'form',
                    'oauth_nonce': 'form',
                    'oauth_version': 'form',
                    'oauth_verifier': 'form',
                    'oauth_callback': 'form',
                    'oauth_token_secret': 'form',
                    'oauth_callback_confirmed': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-www-form-urlencoded'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__post_req_token_request
        )

        def __post_req_token_request_query_string(
            self,
            **kwargs
        ):
            """post_req_token_request_query_string  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_req_token_request_query_string(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                clever_flavor (str): [optional]
                oauth_consumer_key (str): [optional]
                oauth_token (str): [optional]
                oauth_signature_method (str): [optional]
                oauth_signature (str): [optional]
                oauth_timestamp (str): [optional]
                oauth_nonce (str): [optional]
                oauth_version (str): [optional]
                oauth_verifier (str): [optional]
                oauth_callback (str): [optional]
                oauth_token_secret (str): [optional]
                oauth_callback_confirmed (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.post_req_token_request_query_string = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/oauth/request_token_query',
                'operation_id': 'post_req_token_request_query_string',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'clever_flavor',
                    'oauth_consumer_key',
                    'oauth_token',
                    'oauth_signature_method',
                    'oauth_signature',
                    'oauth_timestamp',
                    'oauth_nonce',
                    'oauth_version',
                    'oauth_verifier',
                    'oauth_callback',
                    'oauth_token_secret',
                    'oauth_callback_confirmed',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'clever_flavor':
                        (str,),
                    'oauth_consumer_key':
                        (str,),
                    'oauth_token':
                        (str,),
                    'oauth_signature_method':
                        (str,),
                    'oauth_signature':
                        (str,),
                    'oauth_timestamp':
                        (str,),
                    'oauth_nonce':
                        (str,),
                    'oauth_version':
                        (str,),
                    'oauth_verifier':
                        (str,),
                    'oauth_callback':
                        (str,),
                    'oauth_token_secret':
                        (str,),
                    'oauth_callback_confirmed':
                        (str,),
                },
                'attribute_map': {
                    'clever_flavor': 'clever_flavor',
                    'oauth_consumer_key': 'oauth_consumer_key',
                    'oauth_token': 'oauth_token',
                    'oauth_signature_method': 'oauth_signature_method',
                    'oauth_signature': 'oauth_signature',
                    'oauth_timestamp': 'oauth_timestamp',
                    'oauth_nonce': 'oauth_nonce',
                    'oauth_version': 'oauth_version',
                    'oauth_verifier': 'oauth_verifier',
                    'oauth_callback': 'oauth_callback',
                    'oauth_token_secret': 'oauth_token_secret',
                    'oauth_callback_confirmed': 'oauth_callback_confirmed',
                },
                'location_map': {
                    'clever_flavor': 'query',
                    'oauth_consumer_key': 'query',
                    'oauth_token': 'query',
                    'oauth_signature_method': 'query',
                    'oauth_signature': 'query',
                    'oauth_timestamp': 'query',
                    'oauth_nonce': 'query',
                    'oauth_version': 'query',
                    'oauth_verifier': 'query',
                    'oauth_callback': 'query',
                    'oauth_token_secret': 'query',
                    'oauth_callback_confirmed': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-www-form-urlencoded'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__post_req_token_request_query_string
        )
