"""
    Clever-Cloud API

    Public API for managing Clever-Cloud data and products  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Contact: support@clever-cloud.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.application_view import ApplicationView
from openapi_client.model.end_of_invoice_response import EndOfInvoiceResponse
from openapi_client.model.github_webhook_payload import GithubWebhookPayload
from openapi_client.model.message import Message
from openapi_client.model.o_auth_application_view import OAuthApplicationView
from openapi_client.model.o_auth_transaction_view import OAuthTransactionView
from openapi_client.model.payment_data import PaymentData
from openapi_client.model.ssh_key_view import SshKeyView
from openapi_client.model.user_view import UserView


class UserApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __ask_for_password_reset_via_form(
            self,
            **kwargs
        ):
            """ask_for_password_reset_via_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.ask_for_password_reset_via_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                login (str): [optional]
                drop_tokens (str): [optional]
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.ask_for_password_reset_via_form = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/password_forgotten',
                'operation_id': 'ask_for_password_reset_via_form',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'login',
                    'drop_tokens',
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'login':
                        (str,),
                    'drop_tokens':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'login': 'login',
                    'drop_tokens': 'drop_tokens',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'login': 'form',
                    'drop_tokens': 'form',
                    'clever_flavor': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__ask_for_password_reset_via_form
        )

        def __authorize_paypal_transaction(
            self,
            bid,
            payment_data,
            **kwargs
        ):
            """authorize_paypal_transaction  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.authorize_paypal_transaction(bid, payment_data, async_req=True)
            >>> result = thread.get()

            Args:
                bid (str):
                payment_data (PaymentData):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bid'] = \
                bid
            kwargs['payment_data'] = \
                payment_data
            return self.call_with_http_info(**kwargs)

        self.authorize_paypal_transaction = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/invoice/external/paypal/{bid}',
                'operation_id': 'authorize_paypal_transaction',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'bid',
                    'payment_data',
                ],
                'required': [
                    'bid',
                    'payment_data',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bid':
                        (str,),
                    'payment_data':
                        (PaymentData,),
                },
                'attribute_map': {
                    'bid': 'bid',
                },
                'location_map': {
                    'bid': 'path',
                    'payment_data': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__authorize_paypal_transaction
        )

        def __cancel_paypal_transaction(
            self,
            bid,
            **kwargs
        ):
            """cancel_paypal_transaction  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.cancel_paypal_transaction(bid, async_req=True)
            >>> result = thread.get()

            Args:
                bid (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bid'] = \
                bid
            return self.call_with_http_info(**kwargs)

        self.cancel_paypal_transaction = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/invoice/external/paypal/{bid}',
                'operation_id': 'cancel_paypal_transaction',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'bid',
                ],
                'required': [
                    'bid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bid':
                        (str,),
                },
                'attribute_map': {
                    'bid': 'bid',
                },
                'location_map': {
                    'bid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__cancel_paypal_transaction
        )

        def __confirm_password_reset_request(
            self,
            key,
            **kwargs
        ):
            """confirm_password_reset_request  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.confirm_password_reset_request(key, async_req=True)
            >>> result = thread.get()

            Args:
                key (str):

            Keyword Args:
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['key'] = \
                key
            return self.call_with_http_info(**kwargs)

        self.confirm_password_reset_request = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/password_forgotten/{key}',
                'operation_id': 'confirm_password_reset_request',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    'clever_flavor',
                ],
                'required': [
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'key': 'path',
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__confirm_password_reset_request
        )

        def __create_user_from_form(
            self,
            **kwargs
        ):
            """create_user_from_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_user_from_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                invitation_key (str): [optional]
                addon_beta_invitation_key (str): [optional]
                email (str): [optional]
                _pass (str): [optional]
                url_next (str): [optional]
                terms (str): [optional]
                subscription_source (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.create_user_from_form = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/users',
                'operation_id': 'create_user_from_form',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'invitation_key',
                    'addon_beta_invitation_key',
                    'email',
                    '_pass',
                    'url_next',
                    'terms',
                    'subscription_source',
                    'clever_flavor',
                    'oauth_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'invitation_key':
                        (str,),
                    'addon_beta_invitation_key':
                        (str,),
                    'email':
                        (str,),
                    '_pass':
                        (str,),
                    'url_next':
                        (str,),
                    'terms':
                        (str,),
                    'subscription_source':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                },
                'attribute_map': {
                    'invitation_key': 'invitationKey',
                    'addon_beta_invitation_key': 'addonBetaInvitationKey',
                    'email': 'email',
                    '_pass': 'pass',
                    'url_next': 'url_next',
                    'terms': 'terms',
                    'subscription_source': 'subscription_source',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                },
                'location_map': {
                    'invitation_key': 'form',
                    'addon_beta_invitation_key': 'form',
                    'email': 'form',
                    '_pass': 'form',
                    'url_next': 'form',
                    'terms': 'form',
                    'subscription_source': 'form',
                    'clever_flavor': 'form',
                    'oauth_token': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__create_user_from_form
        )

        def __delete_github_link(
            self,
            **kwargs
        ):
            """delete_github_link  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_github_link(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.delete_github_link = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [],
                'endpoint_path': '/github/link',
                'operation_id': 'delete_github_link',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_github_link
        )

        def __finsih_github_signup(
            self,
            **kwargs
        ):
            """finsih_github_signup  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.finsih_github_signup(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                transaction_id (str): [optional]
                name (str): [optional]
                other_id (str): [optional]
                other_email (str): [optional]
                password (str): [optional]
                auto_link (str): [optional]
                terms (str): [optional]
                invitation_key (str): [optional]
                mfa_kind (str): [optional]
                mfa_attempt (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.finsih_github_signup = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/github/signup',
                'operation_id': 'finsih_github_signup',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'name',
                    'other_id',
                    'other_email',
                    'password',
                    'auto_link',
                    'terms',
                    'invitation_key',
                    'mfa_kind',
                    'mfa_attempt',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'name':
                        (str,),
                    'other_id':
                        (str,),
                    'other_email':
                        (str,),
                    'password':
                        (str,),
                    'auto_link':
                        (str,),
                    'terms':
                        (str,),
                    'invitation_key':
                        (str,),
                    'mfa_kind':
                        (str,),
                    'mfa_attempt':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transactionId',
                    'name': 'name',
                    'other_id': 'otherId',
                    'other_email': 'otherEmail',
                    'password': 'password',
                    'auto_link': 'autoLink',
                    'terms': 'terms',
                    'invitation_key': 'invitationKey',
                    'mfa_kind': 'mfa_kind',
                    'mfa_attempt': 'mfa_attempt',
                },
                'location_map': {
                    'transaction_id': 'form',
                    'name': 'form',
                    'other_id': 'form',
                    'other_email': 'form',
                    'password': 'form',
                    'auto_link': 'form',
                    'terms': 'form',
                    'invitation_key': 'form',
                    'mfa_kind': 'form',
                    'mfa_attempt': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__finsih_github_signup
        )

        def __get_applications(
            self,
            id,
            **kwargs
        ):
            """get_applications  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_applications(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ApplicationView]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_applications = _Endpoint(
            settings={
                'response_type': ([ApplicationView],),
                'auth': [],
                'endpoint_path': '/users/{id}/applications',
                'operation_id': 'get_applications',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_applications
        )

        def __get_env(
            self,
            app_id,
            **kwargs
        ):
            """get_env  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_env(app_id, async_req=True)
            >>> result = thread.get()

            Args:
                app_id (str):

            Keyword Args:
                token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['app_id'] = \
                app_id
            return self.call_with_http_info(**kwargs)

        self.get_env = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/application/{appId}/environment',
                'operation_id': 'get_env',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'app_id',
                    'token',
                ],
                'required': [
                    'app_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'app_id':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'app_id': 'appId',
                    'token': 'token',
                },
                'location_map': {
                    'app_id': 'path',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_env
        )

        def __get_git_info(
            self,
            user_id,
            **kwargs
        ):
            """get_git_info  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_git_info(user_id, async_req=True)
            >>> result = thread.get()

            Args:
                user_id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['user_id'] = \
                user_id
            return self.call_with_http_info(**kwargs)

        self.get_git_info = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/users/{userId}/git-info',
                'operation_id': 'get_git_info',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_id',
                ],
                'required': [
                    'user_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_id':
                        (str,),
                },
                'attribute_map': {
                    'user_id': 'userId',
                },
                'location_map': {
                    'user_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_git_info
        )

        def __get_github(
            self,
            **kwargs
        ):
            """get_github  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OAuthTransactionView
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github = _Endpoint(
            settings={
                'response_type': (OAuthTransactionView,),
                'auth': [],
                'endpoint_path': '/github',
                'operation_id': 'get_github',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github
        )

        def __get_github_applications(
            self,
            **kwargs
        ):
            """get_github_applications  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_applications(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OAuthApplicationView]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_applications = _Endpoint(
            settings={
                'response_type': ([OAuthApplicationView],),
                'auth': [],
                'endpoint_path': '/github/applications',
                'operation_id': 'get_github_applications',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_applications
        )

        def __get_github_callback(
            self,
            **kwargs
        ):
            """get_github_callback  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_callback(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                cc_o_auth_data (str): [optional]
                code (str): [optional]
                state (str): [optional]
                error (str): [optional]
                error_description (str): [optional]
                error_uri (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_callback = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/github/callback',
                'operation_id': 'get_github_callback',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cc_o_auth_data',
                    'code',
                    'state',
                    'error',
                    'error_description',
                    'error_uri',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cc_o_auth_data':
                        (str,),
                    'code':
                        (str,),
                    'state':
                        (str,),
                    'error':
                        (str,),
                    'error_description':
                        (str,),
                    'error_uri':
                        (str,),
                },
                'attribute_map': {
                    'cc_o_auth_data': 'CcOAuthData',
                    'code': 'code',
                    'state': 'state',
                    'error': 'error',
                    'error_description': 'error_description',
                    'error_uri': 'error_uri',
                },
                'location_map': {
                    'cc_o_auth_data': 'cookie',
                    'code': 'query',
                    'state': 'query',
                    'error': 'query',
                    'error_description': 'query',
                    'error_uri': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_callback
        )

        def __get_github_emails(
            self,
            **kwargs
        ):
            """get_github_emails  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_emails(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [str]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_emails = _Endpoint(
            settings={
                'response_type': ([str],),
                'auth': [],
                'endpoint_path': '/github/emails',
                'operation_id': 'get_github_emails',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_emails
        )

        def __get_github_keys(
            self,
            **kwargs
        ):
            """get_github_keys  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_keys(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [SshKeyView]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_keys = _Endpoint(
            settings={
                'response_type': ([SshKeyView],),
                'auth': [],
                'endpoint_path': '/github/keys',
                'operation_id': 'get_github_keys',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_keys
        )

        def __get_github_link(
            self,
            **kwargs
        ):
            """get_github_link  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_link(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                transaction_id (str): [optional]
                redirect_url (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_link = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/github/link',
                'operation_id': 'get_github_link',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'transaction_id',
                    'redirect_url',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'transaction_id':
                        (str,),
                    'redirect_url':
                        (str,),
                },
                'attribute_map': {
                    'transaction_id': 'transactionId',
                    'redirect_url': 'redirectUrl',
                },
                'location_map': {
                    'transaction_id': 'query',
                    'redirect_url': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_link
        )

        def __get_github_login(
            self,
            **kwargs
        ):
            """get_github_login  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_login(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                redirect_url (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                invitation_key (str): [optional]
                subscription_source (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_login = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/github/login',
                'operation_id': 'get_github_login',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'redirect_url',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                    'invitation_key',
                    'subscription_source',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'redirect_url':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                    'invitation_key':
                        (str,),
                    'subscription_source':
                        (str,),
                },
                'attribute_map': {
                    'redirect_url': 'redirectUrl',
                    'from_authorize': 'fromAuthorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                    'invitation_key': 'invitationKey',
                    'subscription_source': 'subscriptionSource',
                },
                'location_map': {
                    'redirect_url': 'query',
                    'from_authorize': 'query',
                    'cli_token': 'query',
                    'clever_flavor': 'query',
                    'oauth_token': 'query',
                    'invitation_key': 'query',
                    'subscription_source': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_login
        )

        def __get_github_username(
            self,
            **kwargs
        ):
            """get_github_username  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_github_username(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_github_username = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/github/username',
                'operation_id': 'get_github_username',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_github_username
        )

        def __get_login_form(
            self,
            **kwargs
        ):
            """get_login_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_login_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                secondary_email_key (str): [optional]
                deletion_key (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_login_form = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/session/login',
                'operation_id': 'get_login_form',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secondary_email_key',
                    'deletion_key',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secondary_email_key':
                        (str,),
                    'deletion_key':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'secondary_email_key': 'secondaryEmailKey',
                    'deletion_key': 'deletionKey',
                    'from_authorize': 'fromAuthorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'secondary_email_key': 'query',
                    'deletion_key': 'query',
                    'from_authorize': 'query',
                    'cli_token': 'query',
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_login_form
        )

        def __get_login_form1(
            self,
            **kwargs
        ):
            """get_login_form1  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_login_form1(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                secondary_email_key (str): [optional]
                deletion_key (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_login_form1 = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/sessions/login',
                'operation_id': 'get_login_form1',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secondary_email_key',
                    'deletion_key',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secondary_email_key':
                        (str,),
                    'deletion_key':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'secondary_email_key': 'secondaryEmailKey',
                    'deletion_key': 'deletionKey',
                    'from_authorize': 'fromAuthorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'secondary_email_key': 'query',
                    'deletion_key': 'query',
                    'from_authorize': 'query',
                    'cli_token': 'query',
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_login_form1
        )

        def __get_password_forgotten_form(
            self,
            **kwargs
        ):
            """get_password_forgotten_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_password_forgotten_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_password_forgotten_form = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/password_forgotten',
                'operation_id': 'get_password_forgotten_form',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_password_forgotten_form
        )

        def __get_signup_form(
            self,
            **kwargs
        ):
            """get_signup_form  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_signup_form(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                invitation_key (str): [optional]
                url_next (str): [optional]
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_signup_form = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/session/signup',
                'operation_id': 'get_signup_form',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'invitation_key',
                    'url_next',
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'invitation_key':
                        (str,),
                    'url_next':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'invitation_key': 'invitationKey',
                    'url_next': 'url_next',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'invitation_key': 'query',
                    'url_next': 'query',
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_signup_form
        )

        def __get_signup_form1(
            self,
            **kwargs
        ):
            """get_signup_form1  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_signup_form1(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                invitation_key (str): [optional]
                url_next (str): [optional]
                clever_flavor (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_signup_form1 = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/sessions/signup',
                'operation_id': 'get_signup_form1',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'invitation_key',
                    'url_next',
                    'clever_flavor',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'invitation_key':
                        (str,),
                    'url_next':
                        (str,),
                    'clever_flavor':
                        (str,),
                },
                'attribute_map': {
                    'invitation_key': 'invitationKey',
                    'url_next': 'url_next',
                    'clever_flavor': 'clever_flavor',
                },
                'location_map': {
                    'invitation_key': 'query',
                    'url_next': 'query',
                    'clever_flavor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_signup_form1
        )

        def __get_user_by_id(
            self,
            id,
            **kwargs
        ):
            """get_user_by_id  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_user_by_id(id, async_req=True)
            >>> result = thread.get()

            Args:
                id (str):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                UserView
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_user_by_id = _Endpoint(
            settings={
                'response_type': (UserView,),
                'auth': [],
                'endpoint_path': '/users/{id}',
                'operation_id': 'get_user_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_user_by_id
        )

        def __github_signup(
            self,
            **kwargs
        ):
            """github_signup  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.github_signup(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                redirect_url (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                invitation_key (str): [optional]
                subscription_source (str): [optional]
                terms (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.github_signup = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/github/signup',
                'operation_id': 'github_signup',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'redirect_url',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                    'invitation_key',
                    'subscription_source',
                    'terms',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'redirect_url':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                    'invitation_key':
                        (str,),
                    'subscription_source':
                        (str,),
                    'terms':
                        (str,),
                },
                'attribute_map': {
                    'redirect_url': 'redirectUrl',
                    'from_authorize': 'fromAuthorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                    'invitation_key': 'invitationKey',
                    'subscription_source': 'subscriptionSource',
                    'terms': 'terms',
                },
                'location_map': {
                    'redirect_url': 'query',
                    'from_authorize': 'query',
                    'cli_token': 'query',
                    'clever_flavor': 'query',
                    'oauth_token': 'query',
                    'invitation_key': 'query',
                    'subscription_source': 'query',
                    'terms': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__github_signup
        )

        def __login(
            self,
            **kwargs
        ):
            """login  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.login(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                email (str): [optional]
                _pass (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.login = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/session/login',
                'operation_id': 'login',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'email',
                    '_pass',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'email':
                        (str,),
                    '_pass':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                },
                'attribute_map': {
                    'email': 'email',
                    '_pass': 'pass',
                    'from_authorize': 'from_authorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                },
                'location_map': {
                    'email': 'form',
                    '_pass': 'form',
                    'from_authorize': 'form',
                    'cli_token': 'form',
                    'clever_flavor': 'form',
                    'oauth_token': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__login
        )

        def __login1(
            self,
            **kwargs
        ):
            """login1  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.login1(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                email (str): [optional]
                _pass (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.login1 = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/sessions/login',
                'operation_id': 'login1',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'email',
                    '_pass',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'email':
                        (str,),
                    '_pass':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                },
                'attribute_map': {
                    'email': 'email',
                    '_pass': 'pass',
                    'from_authorize': 'from_authorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                },
                'location_map': {
                    'email': 'form',
                    '_pass': 'form',
                    'from_authorize': 'form',
                    'cli_token': 'form',
                    'clever_flavor': 'form',
                    'oauth_token': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__login1
        )

        def __mfa_login(
            self,
            **kwargs
        ):
            """mfa_login  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mfa_login(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                mfa_kind (str): [optional]
                mfa_attempt (str): [optional]
                email (str): [optional]
                auth_id (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OAuthApplicationView]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mfa_login = _Endpoint(
            settings={
                'response_type': ([OAuthApplicationView],),
                'auth': [],
                'endpoint_path': '/session/mfa_login',
                'operation_id': 'mfa_login',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mfa_kind',
                    'mfa_attempt',
                    'email',
                    'auth_id',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mfa_kind':
                        (str,),
                    'mfa_attempt':
                        (str,),
                    'email':
                        (str,),
                    'auth_id':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                },
                'attribute_map': {
                    'mfa_kind': 'mfa_kind',
                    'mfa_attempt': 'mfa_attempt',
                    'email': 'email',
                    'auth_id': 'auth_id',
                    'from_authorize': 'from_authorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                },
                'location_map': {
                    'mfa_kind': 'form',
                    'mfa_attempt': 'form',
                    'email': 'form',
                    'auth_id': 'form',
                    'from_authorize': 'form',
                    'cli_token': 'form',
                    'clever_flavor': 'form',
                    'oauth_token': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__mfa_login
        )

        def __mfa_login1(
            self,
            **kwargs
        ):
            """mfa_login1  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.mfa_login1(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                mfa_kind (str): [optional]
                mfa_attempt (str): [optional]
                email (str): [optional]
                auth_id (str): [optional]
                from_authorize (str): [optional]
                cli_token (str): [optional]
                clever_flavor (str): [optional]
                oauth_token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [OAuthApplicationView]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.mfa_login1 = _Endpoint(
            settings={
                'response_type': ([OAuthApplicationView],),
                'auth': [],
                'endpoint_path': '/sessions/mfa_login',
                'operation_id': 'mfa_login1',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'mfa_kind',
                    'mfa_attempt',
                    'email',
                    'auth_id',
                    'from_authorize',
                    'cli_token',
                    'clever_flavor',
                    'oauth_token',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'mfa_kind':
                        (str,),
                    'mfa_attempt':
                        (str,),
                    'email':
                        (str,),
                    'auth_id':
                        (str,),
                    'from_authorize':
                        (str,),
                    'cli_token':
                        (str,),
                    'clever_flavor':
                        (str,),
                    'oauth_token':
                        (str,),
                },
                'attribute_map': {
                    'mfa_kind': 'mfa_kind',
                    'mfa_attempt': 'mfa_attempt',
                    'email': 'email',
                    'auth_id': 'auth_id',
                    'from_authorize': 'from_authorize',
                    'cli_token': 'cli_token',
                    'clever_flavor': 'clever_flavor',
                    'oauth_token': 'oauth_token',
                },
                'location_map': {
                    'mfa_kind': 'form',
                    'mfa_attempt': 'form',
                    'email': 'form',
                    'auth_id': 'form',
                    'from_authorize': 'form',
                    'cli_token': 'form',
                    'clever_flavor': 'form',
                    'oauth_token': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__mfa_login1
        )

        def __post_github_redeploy(
            self,
            github_webhook_payload,
            **kwargs
        ):
            """post_github_redeploy  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_github_redeploy(github_webhook_payload, async_req=True)
            >>> result = thread.get()

            Args:
                github_webhook_payload (GithubWebhookPayload):

            Keyword Args:
                user_agent (str): [optional]
                x_github_event (str): [optional]
                x_hub_signature (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['github_webhook_payload'] = \
                github_webhook_payload
            return self.call_with_http_info(**kwargs)

        self.post_github_redeploy = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [],
                'endpoint_path': '/github/redeploy',
                'operation_id': 'post_github_redeploy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'github_webhook_payload',
                    'user_agent',
                    'x_github_event',
                    'x_hub_signature',
                ],
                'required': [
                    'github_webhook_payload',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'github_webhook_payload':
                        (GithubWebhookPayload,),
                    'user_agent':
                        (str,),
                    'x_github_event':
                        (str,),
                    'x_hub_signature':
                        (str,),
                },
                'attribute_map': {
                    'user_agent': 'User-Agent',
                    'x_github_event': 'X-Github-Event',
                    'x_hub_signature': 'X-Hub-Signature',
                },
                'location_map': {
                    'github_webhook_payload': 'body',
                    'user_agent': 'header',
                    'x_github_event': 'header',
                    'x_hub_signature': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_github_redeploy
        )

        def __reset_password_forgotten(
            self,
            key,
            **kwargs
        ):
            """reset_password_forgotten  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.reset_password_forgotten(key, async_req=True)
            >>> result = thread.get()

            Args:
                key (str):

            Keyword Args:
                _pass (str): [optional]
                pass2 (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                str
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['key'] = \
                key
            return self.call_with_http_info(**kwargs)

        self.reset_password_forgotten = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [],
                'endpoint_path': '/password_forgotten/{key}',
                'operation_id': 'reset_password_forgotten',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'key',
                    '_pass',
                    'pass2',
                ],
                'required': [
                    'key',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'key':
                        (str,),
                    '_pass':
                        (str,),
                    'pass2':
                        (str,),
                },
                'attribute_map': {
                    'key': 'key',
                    '_pass': 'pass',
                    'pass2': 'pass2',
                },
                'location_map': {
                    'key': 'path',
                    '_pass': 'form',
                    'pass2': 'form',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/html'
                ],
                'content_type': [
                    'application/x-www-form-urlencoded'
                ]
            },
            api_client=api_client,
            callable=__reset_password_forgotten
        )

        def __update_env(
            self,
            app_id,
            body,
            **kwargs
        ):
            """update_env  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_env(app_id, body, async_req=True)
            >>> result = thread.get()

            Args:
                app_id (str):
                body (str):

            Keyword Args:
                token (str): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Message
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['app_id'] = \
                app_id
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.update_env = _Endpoint(
            settings={
                'response_type': (Message,),
                'auth': [],
                'endpoint_path': '/application/{appId}/environment',
                'operation_id': 'update_env',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'app_id',
                    'body',
                    'token',
                ],
                'required': [
                    'app_id',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'app_id':
                        (str,),
                    'body':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'app_id': 'appId',
                    'token': 'token',
                },
                'location_map': {
                    'app_id': 'path',
                    'body': 'body',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__update_env
        )

        def __update_invoice(
            self,
            bid,
            end_of_invoice_response,
            **kwargs
        ):
            """update_invoice  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.update_invoice(bid, end_of_invoice_response, async_req=True)
            >>> result = thread.get()

            Args:
                bid (str):
                end_of_invoice_response (EndOfInvoiceResponse):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['bid'] = \
                bid
            kwargs['end_of_invoice_response'] = \
                end_of_invoice_response
            return self.call_with_http_info(**kwargs)

        self.update_invoice = _Endpoint(
            settings={
                'response_type': None,
                'auth': [],
                'endpoint_path': '/invoice/external/{bid}',
                'operation_id': 'update_invoice',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bid',
                    'end_of_invoice_response',
                ],
                'required': [
                    'bid',
                    'end_of_invoice_response',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bid':
                        (str,),
                    'end_of_invoice_response':
                        (EndOfInvoiceResponse,),
                },
                'attribute_map': {
                    'bid': 'bid',
                },
                'location_map': {
                    'bid': 'path',
                    'end_of_invoice_response': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__update_invoice
        )
